{"version":3,"file":"bootprompt.min.js","sources":["../../src/bootprompt.ts"],"sourcesContent":["/**\n * bootprompt.js\n * license: MIT\n * http://github.com/lddubeau/bootprompt\n */\n\n// tslint:disable-next-line:no-import-side-effect\nimport \"bootstrap\";\n// tslint:disable-next-line:import-name match-default-export-name\nimport $ from \"jquery\";\n\n// We use this to keep versync happy.\nconst version = \"6.0.2\";\n\n// But export this.\n/** Bootprompt's version */\nexport const VERSION = version;\n\n/**\n * The names of the fields that should be defined in a [[Locale]].\n */\nexport type LocaleField = \"OK\" | \"CANCEL\" | \"CONFIRM\";\n\n/** A locale specification. */\nexport type LocaleSpec = Record<LocaleField, string>;\n\nconst LOCALE_FIELDS: LocaleField[] = [\"OK\",  \"CANCEL\", \"CONFIRM\"];\n\nconst definedLocales: Record<string, LocaleSpec> = Object.create(null);\n\n/**\n * Data which we can insert into a DOM document. A string will be interpreted as\n * plain HTML to create DOM nodes.\n */\nexport type DocumentContent =\n  string | Element | DocumentFragment | Text | JQuery;\n\n/**\n * This is the kind of callback all buttons accept.\n *\n * @param this This is set to the jQuery object that models the modal.\n *\n * @param event The jQuery event that triggered the button.\n *\n * @returns ``false`` to keep the modal up. Anything else will hide the modal.\n */\nexport type ButtonCallback =\n  (this: JQuery, event: JQuery.TriggeredEvent) => boolean | void;\n\n/**\n * This interface provides the detailed way to specify a modal button.\n */\nexport interface Button {\n  /**\n   * The name of the button shown to the user. The buttons for a modal are\n   * specified by a plain JS object with fields whose values conform to the\n   * [[Button]] interface. (See [[Buttons]].) If a label is not specified, this\n   * fields gets a value from the key with which the [[Button]] object is\n   * associated in the map.\n   */\n  label?: string;\n\n  /** An additional class name to give to the button. */\n  className?: string;\n\n  /** A callback to call when the button is clicked. */\n  callback?: ButtonCallback;\n}\n\n/**\n * Used internally after the buttons specifications for a modal have been\n * processed to a sanitized form. After sanitization, all labels and class names\n * are set.\n */\ninterface SanitizedButton extends Button {\n  label: string;\n  className: string;\n}\n\n/**\n * A button specification. A button can be specified in one of two ways: by\n * providing a detailed object, or by only providing the button callback and\n * letting Bootprompt use defaults for the rest.\n */\nexport type ButtonSpec = Button | ButtonCallback;\n\n/**\n * We pass an object of this shape to specify all the buttons to be shown in a\n * modal.\n */\nexport interface Buttons {\n  // We want | undefined here so that we can declare specific names as being\n  // optional.\n  [key: string]: ButtonSpec | undefined;\n}\n\n/**\n * Used internally after the buttons specifications for a modal have been\n * processed to a sanitized form.\n */\ninterface SanitizedButtons extends Buttons {\n  [key: string]: SanitizedButton;\n}\n\n/**\n * A \"specialized button\" is a button for one of the specialized functions. This\n * interface eliminates the ``callback`` field. The specialized functions\n * overwrite any callback set on these buttons with their own callbacks, so it\n * is not sensible to allow setting ``callback``.\n */\nexport interface SpecializedButton extends Button {\n  callback?: never;\n}\n\n/**\n * [[alert]] only takes the ``ok`` button, and so its button specification\n * *must* conform to this interface.\n */\nexport interface OkButton extends Buttons {\n  ok?: SpecializedButton;\n}\n\n/**\n * [[confirm]] and [[prompt]] only take the ``confirm`` and ``cancel`` buttons,\n * so their button specification *must* conform to this interface.\n */\nexport interface ConfirmCancelButtons extends Buttons {\n  confirm?: SpecializedButton;\n  cancel?: SpecializedButton;\n}\n\n/**\n * The set of options which is common to [[alert]], [[confirm]], [[prompt]] and\n * [[dialog]].\n */\nexport interface CommonOptions {\n  /**\n   * A message to show in the modal. This is what the modal is asking of the\n   * user.\n   */\n  message?: DocumentContent;\n\n  /**\n   * The title of the modal. This appears in the modal header.\n   */\n  title?: DocumentContent;\n\n  /**\n   * Whether to immediately show the modal.\n   */\n  show?: boolean;\n\n  /**\n   * Specifies whether or not to use a backdrop for the modal.\n   *\n   * - Leaving this option unset is equivalent to setting it to ``\"static\"``.\n   *\n   * - ``\"static\"`` means \"display a backdrop that does not affect the modal\".\n   *\n   * - ``true`` means \"display a backdrop that closes the modal when clicked on.\n   *\n   * - ``false`` means don't display a backdrop.\n   */\n  backdrop?: boolean | \"static\";\n\n  /**\n   * Should the modal have a close button in its header?\n   *\n   * Default: ``true``.\n   */\n  closeButton?: boolean;\n\n  /**\n   * Should the modal be animated?\n   *\n   * Default: ``true``.\n   */\n  animate?: boolean;\n\n  /**\n   * An additional class name to add to the modal. This can be a list of space\n   * separated names, which will all be added to the name.\n   */\n  className?: string;\n\n  /**\n   * The modal size. Bootstrap provides three sizes: default, large and small.\n   *\n   * - Not setting this option selects the default size.\n   *\n   * - ``\"large\"`` selects the large size.\n   *\n   * - ``\"small\"`` selects the small size.\n   *\n   * **Requires Bootstrap 3.1.0 or newer.**\n   */\n  size?: \"large\" | \"small\";\n\n  /**\n   * Which locale to use when generating predefined buttons.\n   *\n   * Default: ``en``.\n   */\n  locale?: string;\n\n  /**\n   * Whether to swap the button order. The effect varies depending on what\n   * function is used:\n   *\n   * + Since [[alert]] creates a dialog with only one button, it has no visible\n   * effect.\n   *\n   * + For [[confirm]] and [[prompt]] this reverses the order of the\n   * cancel/confirm buttons.  The default order is cancel and then confirm. The\n   * reverse order is confirm and then cancel.\n   *\n   * + For [[dialog]] this changes which button is considered \"primary\". The\n   * default is to treat the first button as primary. In reverse, the last\n   * button is primary.\n   *\n   * Default: ``false``.\n   */\n  swapButtonOrder?: boolean;\n\n  /**\n   * Whether to center the modal vertically.\n   *\n   * **Requires Bootstrap 4.1.0 or newer.**\n   *\n   * Default: ``false``.\n   */\n  centerVertical?: boolean;\n\n  /**\n   * The container for the modal. The modal HTML markup needs to be put\n   * somewhere in the page. This specifies where to put it.\n   *\n   * Default: ``document.body``.\n   */\n  container?: string | Element | JQuery;\n}\n\n/**\n * This are the options that pertain to the [[dialog]] function.\n */\n// tslint:disable-next-line:no-any\nexport interface DialogOptions extends CommonOptions{\n  message: DocumentContent;\n\n  /**\n   * Specifies what to do if the user hits ``ESC`` on the keyboard.\n   *\n   * - Leaving this value unset is equivalent to setting it to ``true``.\n   *\n   * - ``true`` means \"dismiss the modal\".\n   *\n   * - ``false`` means \"keep the modal displayed\".\n   *\n   * - If a button callback is passed, the callback is called and if it returns\n   *   ``false`` the modal remains displayed. Any other value dismisses the\n   *   modal.\n   */\n  onEscape?: boolean | ButtonCallback;\n\n  /**\n   * Specifies a callback to call when the user clicks the close button that may\n   * be optionally shown in the modal header (when [[closeButton]] is ``true``).\n   *\n   * If this option is not set, the default behavior is to close the modal.\n   *\n   * If this option is set, then the modal will remain displayed if the callback\n   * returns ``false``. Any other value dismisses the modal.\n   */\n  onClose?: ButtonCallback;\n\n  /**\n   * The list of buttons to show in the dialog.\n   */\n  buttons?: Buttons;\n}\n\n/**\n * Used internally after the dialog options have been sanitized. The\n * sanitization process adds default values, etc.\n */\ninterface SanitizedDialogOptions extends DialogOptions {\n  container: string | Element | JQuery;\n  buttons: SanitizedButtons;\n}\n\n/**\n * Options that are supported by the [[alert]] function.\n */\nexport interface AlertOptions extends CommonOptions {\n  /**\n   * A callback for the modal as a whole. This callback is called when the user\n   * performs an action that may dismiss the modal.\n   *\n   * @returns A return value of ``false`` keeps the modal open. Anything else\n   * closes it.\n   */\n  callback?(this: JQuery): boolean | void;\n\n  /** Alerts show only one button. */\n  buttons?: OkButton;\n\n  /**\n   * Specifies what to do if the user hits ``ESC`` on the keyboard.\n   *\n   * - Leaving this value unset is equivalent to setting it to ``true``.\n   *\n   * - ``true`` invoke [[callback]].\n   *\n   * - ``false`` do not invoke [[callback]].\n   *\n   * - If a button callback is passed, this callback is called and if it returns\n   *   ``false`` [[callback]] is not invoked. Any other value invokes\n   *   [[callback]].\n   */\n  onEscape?: boolean | ButtonCallback;\n\n  /**\n   * Specifies a callback to call when the user clicks the close button that may\n   * be optionally shown in the modal header (when [[closeButton]] is ``true``).\n   *\n   * If this option is not set, the default behavior is call [[callback]].\n   *\n   * If this option is set, this callback is called and if it returns\n   * ``false``, [[callback]] is not invoked. Any other value invokes\n   * [[callback]].\n   *\n   * The default value is ``undefined``.\n   */\n  onClose?: ButtonCallback;\n}\n\n/**\n * Options common to the functions that show confirm and cancel buttons\n * ([[confirm]] and [[prompt]]).\n */\nexport interface ConfirmCancelCommonOptions {\n  /** Only the confirm and cancel buttons can be customized. */\n  buttons?: ConfirmCancelButtons;\n\n  /**\n   * Specifies what to do if the user hits ``ESC`` on the keyboard.\n   *\n   * - Leaving this value unset is equivalent to setting it to ``true``.\n   *\n   * - ``true`` invoke [[callback]].\n   *\n   * - ``false`` do not invoke [[callback]].\n   *\n   * - If a button callback is passed, this callback is called and if it returns\n   *   ``false`` [[callback]] is not invoked. Any other value invokes\n   *   [[callback]].\n   *\n   * If [[callback]] is invoked due to this option, it is invoked with the\n   * value ``false``. That is, the user's action is interpreted as a\n   * cancellation.\n   */\n  onEscape?: boolean | ButtonCallback;\n\n  /**\n   * Specifies a callback to call when the user clicks the close button that may\n   * be optionally shown in the modal header (when [[closeButton]] is ``true``).\n   *\n   * If this option is not set, the default behavior is call [[callback]].\n   *\n   * If this option is set, this callback is called and if it returns\n   * ``false``, [[callback]] is not invoked. Any other value invokes\n   * [[callback]].\n   *\n   * If [[callback]] is invoked due to this option, it is invoked with the\n   * value ``false``. That is, the user's action is interpreted as a\n   * cancellation.\n   *\n   * The default value is ``undefined``.\n   */\n  onClose?: ButtonCallback;\n}\n\n/**\n * The options that are supported by the [[confirm]] function.\n */\nexport interface ConfirmOptions extends CommonOptions,\nConfirmCancelCommonOptions {\n  message: DocumentContent;\n\n  /**\n   * A callback for the modal as a whole. This callback is called when the user\n   * performs an action that may dismiss the modal.\n   *\n   * @param value ``true`` if the user confirmed, ``false`` otherwise.\n   *\n   * @returns A return value of ``false`` keeps the modal open. Anything else\n   * closes it.\n   */\n  callback?(this: JQuery, value: boolean): boolean | void;\n}\n\nexport type TextInputType = \"text\";\nexport type PasswordInputType = \"password\";\nexport type TextareaInputType = \"textarea\";\nexport type EmailInputType = \"email\";\nexport type NumberInputType = \"number\";\nexport type RangeInputType = \"range\";\nexport type TimeInputType = \"time\";\nexport type DateInputType = \"date\";\nexport type SelectInputType = \"select\";\nexport type CheckboxInputType = \"checkbox\";\nexport type RadioInputType = \"radio\";\n\n/** The input types that present a text field. */\nexport type TextualInputType = TextInputType | PasswordInputType |\n  TextareaInputType | EmailInputType | undefined;\n\n/** The input types that present a numeric field. */\nexport type NumericInputType = NumberInputType | RangeInputType;\n\n/**\n * This type maps an object representing prompt options for a ``select`` input\n * to the value type to be returned by the prompt.\n */\nexport type SelectPromptOptionToValue<T extends { inputType: SelectInputType;\n                                                  multiple?: boolean }> =\n  T[\"multiple\"] extends true ? (string [] | string) : string;\n\n/**\n * This type maps an object representing prompt options to the value type to be\n * returned by the prompt.\n */\nexport type PromptOptionsToValue<T extends { inputType?: string;\n                                             multiple?: boolean }> =\n  T extends {} ? string : // This is for when inputType is unset.\n  T[\"inputType\"] extends (TextualInputType | NumericInputType | TimeInputType |\n                          DateInputType | RadioInputType) ? string :\n  T[\"inputType\"] extends CheckboxInputType ? (string | string[]) :\n  T extends { inputType: SelectInputType } ? SelectPromptOptionToValue<T> :\n  never;\n\n/**\n * The options that are supported by the [[prompt]] function, irrespective of\n * what ``inputType`` is used.\n */\nexport interface PromptCommonOptions\n  extends CommonOptions, ConfirmCancelCommonOptions {\n  inputType?: string;\n\n  title: DocumentContent;\n\n  /**\n   * A callback for the modal as a whole. This callback is called when the user\n   * performs an action that may dismiss the modal.\n   *\n   * @param value ``null`` if the user canceled the modal. Otherwise, it is the\n   * value of the ``input`` element.\n   *\n   * @returns A return value of ``false`` keeps the modal open. Anything else\n   * closes it.\n   */\n  callback?(this: JQuery,\n            value: PromptOptionsToValue<this> | null): boolean | void;\n\n  /**\n   * If ``pattern`` is set, the prompt will not close if the input value does\n   * not match the pattern. Internally, this option uses the property of the\n   * same name on the ``input`` element.\n   *\n   * It can be used for any input type, but generally only used for ``text``\n   * inputs, normally as a fallback for ``email``, ``time``, ``date``,\n   * ``number`` or ``range`` inputs where native browser support for those types\n   * is lacking.\n   *\n   * Default: unset, which means that the input is not validated.\n   */\n  pattern?: string;\n}\n\n/**\n * The [[prompt]] options that are supported when the ``inputType`` is one of\n * the textual inputs.\n */\nexport interface TextPromptOptions extends PromptCommonOptions {\n  /**\n   * These input types are all textual input types. These input type generate an\n   * ``input`` (or ``textarea``) element with the following classes:\n   *\n   * | ``inputType``  | ``className``                 |\n   * | ---------------| ----------------------------- |\n   * | ``\"text\"``     | ``bootprompt-input-text``     |\n   * | ``\"password\"`` | ``bootprompt-input-password`` |\n   * | ``\"textarea\"`` | ``bootprompt-input-textarea`` |\n   * | ``\"email\"``    | ``bootprompt-input-email``    |\n   *\n   * Default: ``\"text\"``.\n   */\n  inputType?: TextualInputType;\n\n  /**\n   * An initial value for the input type.\n   *\n   * Default: ``undefined``.\n   */\n  value?: string;\n\n  /**\n   * Set a maximum length for the input. Users won't be able to type more than\n   * the limit established here. Must be a positive numeric value.\n   *\n   * Default: ``undefined``, which means there's no limit.\n   */\n  maxlength?: number;\n\n  /**\n   * Use this option to provide \"helper\" text displayed in the text field prior\n   * to the user entering anything.\n   *\n   * There is no limit on the amount of text you may use for your placeholder,\n   * but keep in mind that the placeholder disappears when the input either has\n   * focus or has a value (depending on the browser). Use the ``message`` option\n   * instead of this option to provide help text which you want to always be\n   * visible.\n   *\n   * Default: ``undefined``, which means no placeholder.\n   */\n  placeholder?: string;\n\n  /**\n   * Set this option to ``true`` to require an input value. When ``true``, the\n   * prompt will not close if the input value is ``null``, an empty string, or\n   * fails the input type's built-in validation constraints.\n   *\n   * Default: ``undefined``.\n   */\n  required?: boolean;\n}\n\n/**\n * The [[prompt]] options that are supported when the ``inputType`` is one of\n * the numeric inputs.\n */\nexport interface NumericPromptOptions extends PromptCommonOptions {\n  /**\n   * These input types are the numeric inputs. These input type generate an\n   * ``input`` with the following classes:\n   *\n   * | ``inputType``  | ``className``              |\n   * |----------------|----------------------------|\n   * | ``\"number\"``   | ``bootprompt-input-number``|\n   * | ``\"range\"``    | ``bootprompt-input-range`` |\n   *\n   * Default: ``\"text\"``.\n   */\n  inputType: NumericInputType;\n\n  /**\n   * See [[TextPromptOptions.placeholder]].\n   */\n  placeholder?: string;\n\n  /**\n   * An initial value for the input type. Note that even though we are dealing\n   * with numeric inputs, the value is a string.\n   *\n   * **DESIGN NOTE**: If you were to do ``input.value = 1`` directly, the number\n   * would automagically be converted to a string by the browser. This automatic\n   * conversion of numbers to strings is not formally supported by\n   * Bootprompt. The reason is that (again due to the default way the DOM works)\n   * when retreiving values from the ``input`` element, the values are always\n   * strings. Making the API symmetrical (put a ``number`` in, get a ``number``\n   * out) would require more work than reasonable. Note that the DOM\n   * specifications do not provide any automagic conversion to help in this\n   * endeavor. If you read ``input.value``, it will always be a string quite\n   * irrespective of whether you assigned a number to it.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string;\n\n  /* tslint:disable:max-line-length */\n  /**\n   * The minimum value allowed by the input.\n   *\n   * See the MDN article for\n   * [``min``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#min)\n   * for more information.\n   *\n   * Default: ``undefined``, which means no minimum value.\n   */\n  min?: string;\n  /* tslint:enable:max-line-length */\n\n  /* tslint:disable:max-line-length */\n  /**\n   * The maximum value allowed by the input.\n   *\n   * See the MDN article for\n   * [``max``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#max)\n   * for more information.\n   *\n   * Default: ``undefined``, which means no maximum value.\n   */\n  max?: string;\n  /* tslint:enable:max-line-length */\n\n  /* tslint:disable:max-line-length */\n  /**\n   * Can be the string value ``\"any\"`` (the default), or a positive numeric\n   * value.\n   *\n   * See the\n   * [MDN article](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number#step)\n   * for more information.\n   *\n   * Default: ``undefined``, which means ``\"any\"``.\n   */\n  step?: string;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * See [[TextPromptOptions.required]].\n   */\n  required?: boolean;\n}\n\n/**\n * The [[prompt]] options that are supported when the ``inputType`` is\n * ``\"time\"``.\n */\nexport interface TimePromptOptions extends PromptCommonOptions {\n  /**\n   * An ``inputType`` of value ``\"time\"`` creates an ``input`` with the class\n   * name ``bootprompt-input-time``\n   */\n  inputType: TimeInputType;\n\n  /**\n   * See [[TextPromptOptions.placeholder]].\n   */\n  placeholder?: string;\n\n  /**\n   * An initial value for the input type.\n   *\n   * A string of the form ``HH:MM:SS``, where ``HH`` can be any zero-padded\n   * value between 00 and 23 and ``MM`` and ``SS`` can be any zero-padded number\n   * between 00 and 59.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string;\n\n  /* tslint:disable:max-line-length */\n  /**\n   * The minimum value allowed by the input. Must be in the same format as\n   * [[value]].\n   *\n   * See the MDN article for\n   * [``min``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#min)\n   * for more information.\n   *\n   * Default: ``undefined``, which means no minimum value.\n   */\n  min?: string;\n  /* tslint:enable:max-line-length */\n\n  /* tslint:disable:max-line-length */\n  /**\n   * The maximum value allowed by the input. Must be in the same format as\n   * [[value]].\n   *\n   * See the MDN article for\n   * [``max``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#max)\n   * for more information.\n   *\n   * Default: ``undefined``, which means no maximum value.\n   */\n  max?: string;\n  /* tslint:enable:max-line-length */\n\n  /* tslint:disable:max-line-length */\n  /**\n   * Can be the string value ``\"any\"`` (the default), or a positive numeric\n   * value. For ``\"time\"`` inputs, this is a value in seconds.\n   *\n   * See the [MDN\n   * article](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time#step)\n   * for more information.\n   *\n   * Default: ``undefined``, which means ``\"any\"``.\n   */\n  step?: string;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * See [[TextPromptOptions.required]].\n   */\n  required?: boolean;\n}\n\n/**\n * The [[prompt]] options that are supported when the ``inputType`` is\n * ``\"date\"``.\n */\nexport interface DatePromptOptions extends PromptCommonOptions {\n  /**\n   * An ``inputType`` of value ``\"date\"`` creates an ``input`` with the class\n   * name ``bootprompt-input-date``\n   */\n  inputType: DateInputType;\n\n  /**\n   * See [[TextPromptOptions.placeholder]].\n   */\n  placeholder?: string;\n\n  /**\n   * An initial value for the input type.\n   *\n   * A string of the form ``YYYY-MM-DD``, where ``YYYY`` can be any zero-padded\n   * value greater than 0000, ``MM`` can be any zero-padded number between 01\n   * and 12, and ``DD`` can be any zero-padded number between 01 and 31.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string;\n\n  /* tslint:disable:max-line-length */\n  /**\n   * The minimum value allowed by the input. Must be in the same format as\n   * [[value]].\n   *\n   * See the MDN article for\n   * [``min``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#min)\n   * for more information.\n   *\n   * Default: ``undefined``, which means no minimum value.\n   */\n  min?: string;\n  /* tslint:enable:max-line-length */\n\n  /* tslint:disable:max-line-length */\n  /**\n   * The maximum value allowed by the input. Must be in the same format as\n   * [[value]].\n   *\n   * See the MDN article for\n   * [``max``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#max)\n   * for more information.\n   *\n   * Default: ``undefined``, which means no maximum value.\n   */\n  max?: string;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * See [[TextPromptOptions.required]].\n   */\n  required?: boolean;\n}\n\n/**\n * This interface provides options for the ``option`` elements that may be\n * created for ``select``-type inputs.\n */\nexport interface InputOption {\n  /**\n   * The text shown to the user for this ``option``.\n   */\n  text: string;\n\n  /**\n   * The value associated with this option.\n   */\n  value: string;\n\n  /**\n   * An optional group to which this option may be assigned. Options having the\n   * same ``group`` value are grouped together.\n   */\n  group?: string;\n}\n\n/**\n * The options in common for all ``select``-type inputs.\n */\nexport interface CommonSelectOptions extends PromptCommonOptions {\n  /**\n   * An ``inputType`` of value ``\"select\"`` creates an ``input`` with the class\n   * name ``bootprompt-input-select``.\n   */\n  inputType: SelectInputType;\n\n  /** The list of specifications for the ``option`` elements in this input. */\n  inputOptions: InputOption[];\n\n  /**\n   * See [[TextPromptOptions.required]].\n   */\n  required?: boolean;\n}\n\n/**\n * The options supported by ``\"select\"`` inputs that accept multiple values.\n */\nexport interface MultipleSelectPromptOptions extends CommonSelectOptions {\n  /**\n   * An initial value for the input type. It is possible to pass an array of\n   * values to select multiple initial values.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string[] | string;\n\n  /**\n   * This option specifies whether this input accepts multiple values.\n   *\n   * It must be ``true`` for [[MultipleSelectPromptOptions]].\n   */\n  multiple: true;\n}\n\n/**\n * The options supported by ``\"select\"`` inputs that accept a single value.\n */\nexport interface SingleSelectPromptOptions extends CommonSelectOptions {\n  /**\n   * An initial value for the input type.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string;\n\n  /**\n   * This option specifies whether this input accepts multiple values.\n   *\n   * It must be ``false`` or ``undefined`` for [[SingleSelectPromptOptions]].\n   *\n   * Default: ``undefined``, which is the same as ``false``.\n   */\n  multiple?: false;\n}\n\n/** All prompt options that create ``select`` inputs. */\nexport type SelectPromptOptions =\n  MultipleSelectPromptOptions | SingleSelectPromptOptions;\n\n/**\n * The options supported by ``\"checkbox\"`` inputs.\n */\nexport interface CheckboxPromptOptions extends PromptCommonOptions {\n  /**\n   * An ``inputType`` of value ``\"checkbox\"`` creates an ``input`` with the\n   * class name ``bootprompt-input-checkbox``.\n   */\n  inputType: CheckboxInputType;\n\n  /**\n   * An initial value for the input type. It is possible to pass an array of\n   * values to select multiple initial values.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string | string[];\n\n  /** The list of specifications for the checkboxes to create for this input. */\n  inputOptions: InputOption[];\n}\n\n/**\n * The options supported by ``\"radio\"`` inputs.\n */\nexport interface RadioPromptOptions extends PromptCommonOptions {\n  /**\n   * An ``inputType`` of value ``\"radio\"`` creates an ``input`` with the\n   * class name ``bootprompt-input-radio``.\n   */\n  inputType: RadioInputType;\n\n  /**\n   * An initial value for the input type.\n   *\n   * Default: ``undefined``, which means no initial value.\n   */\n  value?: string;\n\n  /**\n   * The list of specifications for the radio buttons to create for this\n   * input.\n   */\n  inputOptions: InputOption[];\n}\n\n/**\n * All the options that [[prompt]] accepts.\n */\nexport type PromptOptions = TextPromptOptions | SelectPromptOptions |\n  NumericPromptOptions | TimePromptOptions | DatePromptOptions |\n  CheckboxPromptOptions | RadioPromptOptions;\n\nconst templates = {\n  dialog: `\\\n<div class=\"bootprompt modal\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\">\\\n <div class=\"modal-dialog\">\\\n  <div class=\"modal-content\">\\\n   <div class=\"modal-body\"><div class=\"bootprompt-body\"></div></div>\\\n  </div>\\\n </div>\\\n</div>`,\n  header: `\\\n<div class=\"modal-header\">\\\n <h5 class=\"modal-title\"></h5>\\\n</div>`,\n  footer: `<div class=\"modal-footer\"></div>`,\n  closeButton: `\n<button type=\"button\" class=\"bootprompt-close-button close\" aria-hidden=\"true\">\\\n&times;</button>`,\n  form: `<form class=\"bootprompt-form\"></form>`,\n  button: `<button type=\"button\" class=\"btn\"></button>`,\n  option: \"<option></option>\",\n  promptMessage: `<div class=\"bootprompt-prompt-message\"></div>`,\n  inputs: {\n    text: `\\\n<input class=\"bootprompt-input bootprompt-input-text form-control\" \\\nautocomplete=\"off\" type=\"text\" />`,\n    textarea: `\\\n<textarea class=\"bootprompt-input bootprompt-input-textarea form-control\">\\\n</textarea>`,\n    email: `\\\n<input class=\"bootprompt-input bootprompt-input-email form-control\" \\\nautocomplete=\"off\" type=\"email\" />`,\n    select: `\\\n<select class=\"bootprompt-input bootprompt-input-select form-control\">\\\n</select>`,\n    checkbox: `\\\n<div class=\"form-check checkbox\"><label class=\"form-check-label\">\\\n <input class=\"form-check-input bootprompt-input bootprompt-input-checkbox\"\n        type=\"checkbox\" />\\\n</label></div>`,\n    radio: `\\\n<div class=\"form-check radio\"><label class=\"form-check-label\">\\\n<input class=\"form-check-input bootprompt-input bootprompt-input-radio\" \\\n       type=\"radio\" name=\"bootprompt-radio\" />\\\n</label></div>`,\n    date: `\\\n<input class=\"bootprompt-input bootprompt-input-date form-control\" \\\nautocomplete=\"off\" type=\"date\" />`,\n    time: `\\\n<input class=\"bootprompt-input bootprompt-input-time form-control\" \\\nautocomplete=\"off\" type=\"time\" />`,\n    number: `\\\n<input class=\"bootprompt-input bootprompt-input-number form-control\" \\\n       autocomplete=\"off\" type=\"number\" />`,\n    password: `\\\n<input class=\"bootprompt-input bootprompt-input-password form-control\" \\\nautocomplete=\"off\" type=\"password\" />`,\n    range: `\\\n<input class=\"bootprompt-input bootprompt-input-range form-control-range\"\nautocomplete=\"off\" type=\"range\" />`,\n  },\n};\n\nlet currentLocale = \"en\";\nlet animate = true;\n\n//\n// PUBLIC FUNCTIONS\n//\n\n/**\n * Get all known locales.\n *\n * @returns All known locales.\n */\nexport function locales(): Record<string, LocaleSpec>;\n/**\n * Get a single locale.\n *\n * @param name The name of the locale to get.\n *\n * @returns The locale, or ``undefined`` if the locale is unknown.\n */\nexport function locales(name: string): LocaleSpec | undefined;\nexport function locales(name?: string):\nRecord<string, LocaleSpec> | LocaleSpec | undefined {\n  return name !== undefined ? definedLocales[name] : definedLocales;\n}\n\n/**\n * Register a locale.\n *\n * @param name The name of the locale.\n *\n * @param values The locale specification, which determines how to translate\n * each field.\n *\n * @throws {Error} If a field is missing from ``values``.\n */\nexport function addLocale(name: string, values: LocaleSpec): void {\n  for (const field of LOCALE_FIELDS) {\n    if (typeof values[field] !== \"string\") {\n      throw new Error(`Please supply a translation for \"${field}\"`);\n    }\n  }\n\n  definedLocales[name] = values;\n}\n\n/**\n * Remove a locale. Removing an unknown locale is a no-op.\n *\n * @param name The name of the locale.\n *\n * @throws {Error} If ``name`` is ``\"en\"``. This locale cannot be removed.\n */\nexport function removeLocale(name: string): void {\n  if (name !== \"en\") {\n    delete definedLocales[name];\n  }\n  else {\n    throw new Error(`\"en\" is used as the default and fallback locale and \\\ncannot be removed.`);\n  }\n}\n\n/**\n * Set the default locale. Note that this function does not check whether the\n * locale is known.\n */\nexport function setLocale(name: string): void {\n  currentLocale = name;\n}\n\n/**\n * Set the ``animate`` flag. When the flag is on, the modals produced by this\n * library are animated. When off, they are not animated.\n *\n * **NOTE**: The reason this function exists is to be able to turn off\n * animations during testing. Having the animations turned on can turn simple\n * tests into complicated afairs because it takes a while for a modal to show\n * up or be removed. We do not recommend using this function in production.\n */\nexport function setAnimate(value: boolean): void {\n  animate = value;\n}\n\n/**\n * Hide all modals created with bootprompt.\n */\nexport function hideAll(): void {\n  $(\".bootprompt\").modal(\"hide\");\n}\n\n//\n// CORE HELPER FUNCTIONS\n//\n\n// tslint:disable-next-line:no-any\nconst fnModal = $.fn.modal as any;\n/* istanbul ignore if: we do not test with incorrect environments. */\nif (fnModal === undefined) {\n  throw new Error(\n    `\"$.fn.modal\" is not defined; please double check you have included \\\nthe Bootstrap JavaScript library. See http://getbootstrap.com/javascript/ \\\nfor more details.`);\n}\n\n/* istanbul ignore if: we do not test with incorrect environments. */\nif (!fnModal.Constructor.VERSION) {\n  throw new Error(\"Bootprompt cannot determine the version of Bootstrap used\");\n}\n\nconst fullBootstrapVersion = fnModal.Constructor.VERSION;\nconst bootstrapVersion =\n  Number(fullBootstrapVersion.substring(0,\n                                        fullBootstrapVersion.indexOf(\".\")));\n\n/* istanbul ignore if: we do not test with incorrect environments. */\nif (bootstrapVersion < 3) {\n  throw new Error(\"Bootprompt does not work with Bootstrap 2 and lower.\");\n}\n\n/**\n * This is a general-purpose function allowing to create custom dialogs.\n *\n * @param options The options that govern how the dialog is created.\n *\n * @returns The jQuery object which models the dialog.\n */\n// tslint:disable-next-line:max-func-body-length cyclomatic-complexity\nexport function dialog(options: DialogOptions): JQuery {\n  const finalOptions = sanitize(options);\n\n  const $modal = $(templates.dialog);\n  const modal = $modal[0];\n  const innerDialog = modal.getElementsByClassName(\"modal-dialog\")[0];\n  const body = modal.getElementsByClassName(\"modal-body\")[0] as HTMLElement;\n  const footer = $(templates.footer)[0];\n\n  const callbacks: Record<string, ButtonCallback | boolean | undefined> = {\n    onEscape: finalOptions.onEscape,\n    onClose: finalOptions.onClose,\n  };\n\n  if (callbacks.onEscape === undefined) {\n    callbacks.onEscape = true;\n  }\n\n  const { buttons, backdrop, className, closeButton, message, size,\n          title } = finalOptions;\n  // tslint:disable-next-line:no-non-null-assertion\n  const bpBody = body.getElementsByClassName(\"bootprompt-body\")[0];\n  if (typeof message === \"string\") {\n    // tslint:disable-next-line:no-inner-html\n    bpBody.innerHTML = message;\n  }\n  else {\n    // tslint:disable-next-line:no-inner-html\n    bpBody.innerHTML = \"\";\n    $(bpBody).append(message);\n  }\n\n  let hadButtons = false;\n  // tslint:disable-next-line:forin\n  for (const key in buttons) {\n    hadButtons = true;\n    const b = buttons[key];\n    const $button = $(templates.button);\n    const button = $button[0];\n    $button.data(\"bp-handler\", key);\n    // On IE10/11 it is not possible to just do x.classList.add(a, b, c).\n    for (const cl of b.className.split(\" \")) {\n      button.classList.add(cl);\n    }\n\n    switch (key) {\n      case \"ok\":\n      case \"confirm\":\n        button.classList.add(\"bootprompt-accept\");\n        break;\n\n      case \"cancel\":\n        button.classList.add(\"bootprompt-cancel\");\n        break;\n      default:\n    }\n\n    // tslint:disable-next-line:no-inner-html\n    button.innerHTML = b.label;\n    footer.appendChild(button);\n\n    callbacks[key] = b.callback;\n  }\n\n  // Only attempt to create buttons if at least one has been defined in the\n  // options object.\n  if (hadButtons) {\n    // tslint:disable-next-line:no-non-null-assertion\n    body.parentNode!.insertBefore(footer, body.nextSibling);\n  }\n\n  if (finalOptions.animate === true) {\n    modal.classList.add(\"fade\");\n  }\n\n  if (className !== undefined) {\n    // On IE10/11 it is not possible to just do x.classList.add(a, b, c).\n    for (const cl of className.split(\" \")) {\n      modal.classList.add(cl);\n    }\n  }\n\n  if (size !== undefined) {\n    // Requires Bootstrap 3.1.0 or higher\n    /* istanbul ignore if: we don't systematically test with old versions */\n    if (fullBootstrapVersion.substring(0, 3) < \"3.1\") {\n      // tslint:disable-next-line:no-console\n      console.warn(`\"size\" requires Bootstrap 3.1.0 or higher. You appear \\\nto be using ${fullBootstrapVersion}. Please upgrade to use this option.`);\n    }\n\n    switch (size) {\n      case \"large\":\n        innerDialog.classList.add(\"modal-lg\");\n        break;\n      case \"small\":\n        innerDialog.classList.add(\"modal-sm\");\n        break;\n      default:\n        const q: never = size;\n        throw new Error(`unknown size value: ${q}`);\n    }\n  }\n\n  if (title !== undefined) {\n    // tslint:disable-next-line:no-non-null-assertion\n    body.parentNode!.insertBefore($(templates.header)[0], body);\n    const modalTitle = modal.getElementsByClassName(\"modal-title\")[0];\n    if (typeof title === \"string\") {\n      // tslint:disable-next-line:no-inner-html\n      modalTitle.innerHTML = title;\n    }\n    else {\n      // tslint:disable-next-line:no-inner-html\n      modalTitle.innerHTML = \"\";\n      $(modalTitle).append(title);\n    }\n  }\n\n  if (closeButton === true) {\n    const closeButtonEl = $(templates.closeButton)[0];\n\n    if (title !== undefined) {\n      const modalHeader = modal.getElementsByClassName(\"modal-header\")[0];\n      /* istanbul ignore else: we don't systematically test on old versions */\n      if (bootstrapVersion > 3) {\n        modalHeader.appendChild(closeButtonEl);\n      }\n      else {\n        modalHeader.insertBefore(closeButtonEl, modalHeader.firstChild);\n      }\n    } else {\n      body.insertBefore(closeButtonEl, body.firstChild);\n    }\n  }\n\n  if (finalOptions.centerVertical !== undefined){\n    // Requires Bootstrap 4.0.0 or higher\n    /* istanbul ignore if: we don't systematically test with old versions */\n    if (fullBootstrapVersion < \"4.0.0\") {\n      // tslint:disable-next-line:no-console\n      console.warn(`\"centerVertical\" requires Bootstrap 4.0.0 or \\\nhigher. You appear to be using ${fullBootstrapVersion}. Please upgrade to use \\\nthis option.`);\n    }\n\n    innerDialog.classList.add(\"modal-dialog-centered\");\n  }\n\n  // Bootstrap event listeners; these handle extra setup & teardown required\n  // after the underlying modal has performed certain actions.\n\n  $modal.one(\"hidden.bs.modal\", () => {\n    $modal.off(\"escape.close.bp\");\n    $modal.off(\"click\");\n    $modal.remove();\n  });\n\n  $modal.one(\"shown.bs.modal\", () => {\n    // tslint:disable-next-line:no-non-null-assertion\n    $(modal.querySelector(\".btn-primary\")!).trigger(\"focus\");\n  });\n\n  // Bootprompt event listeners; used to decouple some\n  // behaviours from their respective triggers\n\n  if (backdrop !== \"static\") {\n    // A boolean true/false according to the Bootstrap docs\n    // should show a dialog the user can dismiss by clicking on\n    // the background.\n    // We always only ever pass static/false to the actual\n    // $.modal function because with \"true\" we can't trap\n    // this event (the .modal-backdrop swallows it)\n    // However, we still want to sort of respect true\n    // and invoke the escape mechanism instead\n    $modal.on(\"click.dismiss.bs.modal\", (e: JQuery.TriggeredEvent) => {\n      // The target varies in 3.3.x releases since the modal backdrop moved\n      // *inside* the outer dialog rather than *alongside* it\n      const backdrops =\n        modal.getElementsByClassName(\"modal-backdrop\");\n\n      const target = backdrops.length !== 0 ?\n        /* istanbul ignore next: we don't systematically test with 3.3.x */\n        backdrops[0] :\n        e.currentTarget;\n\n      if (e.target !== target) {\n        return;\n      }\n\n      $modal.trigger(\"escape.close.bp\");\n    });\n  }\n\n  $modal.on(\"escape.close.bp\", (e: JQuery.TriggeredEvent) => {\n    // the if statement looks redundant but it isn't; without it\n    // if we *didn't* have an onEscape handler then processCallback\n    // would automatically dismiss the dialog\n    if (callbacks.onEscape === true ||\n        typeof callbacks.onEscape === \"function\") {\n      processCallback(e, $modal, callbacks.onEscape);\n    }\n  });\n\n  $modal.on(\"click\", \".modal-footer button\",\n            function(this: Element, e: JQuery.TriggeredEvent): void {\n               const callbackKey = $(this).data(\"bp-handler\");\n\n               processCallback(e, $modal, callbacks[callbackKey]);\n             });\n\n  $modal.on(\"click\", \".bootprompt-close-button\", e => {\n    // onEscape might be falsy but that's fine; the fact is\n    // if the user has managed to click the close button we\n    // have to close the dialog, callback or not\n    processCallback(e, $modal, callbacks.onClose);\n  });\n\n  $modal.on(\"keyup\", e => {\n    if (e.which === 27) {\n      $modal.trigger(\"escape.close.bp\");\n    }\n  });\n\n  // The interface defined for $ messes up type inferrence so we have to assert\n  // the type here.\n  $(finalOptions.container as JQuery).append($modal);\n\n  $modal.modal({\n    backdrop: (backdrop === true || backdrop === \"static\") ? \"static\" : false,\n    keyboard: false,\n    show: false,\n  });\n\n  if (finalOptions.show === true) {\n    $modal.modal(\"show\");\n  }\n\n  return $modal;\n}\n\nfunction _alert(options: AlertOptions,\n                callback: AlertOptions[\"callback\"]): JQuery {\n  const finalOptions = mergeDialogOptions(\"alert\", [\"ok\"], options, callback);\n\n  const { callback: finalCallback } = finalOptions;\n\n  // tslint:disable-next-line:no-suspicious-comment\n  // @TODO: can this move inside exports.dialog when we're iterating over each\n  // button and checking its button.callback value instead?\n  if (finalCallback !== undefined && typeof finalCallback !== \"function\") {\n    throw new Error(\"alert requires callback property to be a function when \\\nprovided\");\n  }\n\n  const customCallback = function(this: JQuery): boolean | void {\n    return typeof finalCallback === \"function\" ?\n      finalCallback.call(this) : true;\n  };\n\n  (finalOptions.buttons.ok as Button).callback = customCallback;\n\n  setupEscapeAndCloseCallbacks(finalOptions, customCallback);\n\n  return dialog(finalOptions);\n}\n\n/**\n * This specialized function provides a dialog similar to the one provided by\n * the DOM ``alert()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should be placed within the callback function for\n * this dialog.\n *\n * @param options The options governing how the dialog is created.\n *\n * @returns A jQuery object that models the dialog.\n */\nexport function alert(options: AlertOptions): JQuery;\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``alert()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should be placed within the callback function for\n * this dialog.\n *\n * @param message The message to display.\n *\n * @param callback The callback to call when the dialog has been dismissed.\n *\n * @returns A jQuery object that models the dialog.\n */\nexport function alert(message: string,\n                      callback?: AlertOptions[\"callback\"]): JQuery;\nexport function alert(messageOrOptions: string | AlertOptions,\n                      callback?: AlertOptions[\"callback\"]): JQuery {\n  return _alert(typeof messageOrOptions === \"string\" ?\n                { message: messageOrOptions } :\n                messageOrOptions, callback);\n}\n\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``alert()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should await the promise returned by this function.\n *\n * @param messageOrOptions The message to display, or an object specifying the\n * options for the dialog.\n *\n * @returns A promise that resolves once the dialog has been dismissed.\n */\nexport async function alert$(messageOrOptions: string | AlertOptions):\nPromise<void> {\n  return new Promise(resolve => {\n    _alert(typeof messageOrOptions === \"string\" ?\n           { message: messageOrOptions } : messageOrOptions,\n           undefined)\n      .one(\"hidden.bs.modal\", () => {\n        resolve();\n      });\n  });\n}\n\nfunction _confirm(options: ConfirmOptions,\n                  callback: ConfirmOptions[\"callback\"]): JQuery {\n  const finalOptions = mergeDialogOptions(\"confirm\", [\"cancel\", \"confirm\"],\n                                          options, callback);\n\n  const { callback: finalCallback, buttons } = finalOptions;\n\n  // confirm specific validation; they don't make sense without a callback so\n  // make sure it's present\n  if (typeof finalCallback !== \"function\") {\n    throw new Error(\"confirm requires a callback\");\n  }\n\n  const cancelCallback = function(this: JQuery): boolean | void {\n    return finalCallback.call(this, false);\n  };\n\n  (buttons.cancel as Button).callback = cancelCallback;\n\n  setupEscapeAndCloseCallbacks(finalOptions, cancelCallback);\n\n  (buttons.confirm as Button).callback =\n    function(this: JQuery): boolean | void {\n      return finalCallback.call(this, true);\n    };\n\n  return dialog(finalOptions);\n}\n\n/**\n * This specialized function provides a dialog similar to the one provided by\n * the DOM ``confirm()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should be placed within the callback function for\n * this dialog.\n *\n * @param options The options governing how the dialog is created.\n *\n * @returns A jQuery object that models the dialog.\n */\nexport function confirm(options: ConfirmOptions): JQuery;\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``confirm()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should be placed within the callback function for\n * this dialog.\n *\n * @param message The message to display.\n *\n * @param callback The callback to call when the dialog has been dismissed.\n *\n * @returns A jQuery object that models the dialog.\n */\nexport function confirm(message: string,\n                        callback: ConfirmOptions[\"callback\"]): JQuery;\nexport function confirm(messageOrOptions: string | ConfirmOptions,\n                        callback?: ConfirmOptions[\"callback\"]): JQuery {\n  return _confirm(typeof messageOrOptions === \"string\" ?\n                  { message: messageOrOptions } :\n                  messageOrOptions, callback);\n}\n\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``confirm()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should await the promise returned by this function.\n *\n * @param messageOrOptions The message to display, or an object specifying the\n * options for the dialog.\n *\n * @returns A promise that resolves once the dialog has been dismissed.\n */\nexport async function confirm$(messageOrOptions: string | ConfirmOptions):\nPromise<boolean | null> {\n  return new Promise(resolve => {\n    const options = typeof messageOrOptions === \"string\" ?\n      { message: messageOrOptions } : messageOrOptions;\n    const { callback } = options;\n\n    let result: boolean | null = null;\n    _confirm(options, function(this: JQuery, value: boolean): boolean | void {\n      result = value;\n\n      if (callback !== undefined) {\n        return callback.call(this, result);\n      }\n    }).one(\"hidden.bs.modal\", () => {\n      resolve(result);\n    });\n  });\n}\n\nfunction setupTextualInput(input: JQuery,\n                           options: TextPromptOptions & DialogOptions): void {\n  const { value, placeholder, pattern, maxlength, required } = options;\n\n  // tslint:disable-next-line:no-non-null-assertion\n  input.val(value!);\n\n  if (placeholder !== undefined) {\n    input.attr(\"placeholder\", placeholder);\n  }\n\n  if (pattern !== undefined) {\n    input.attr(\"pattern\", pattern);\n  }\n\n  if (maxlength !== undefined) {\n    input.attr(\"maxlength\", maxlength);\n  }\n\n  if (required === true) {\n    input.prop({ required: true });\n  }\n}\n\nfunction setupNumberLikeInput(input: JQuery,\n                              options: NumericPromptOptions |\n                              DatePromptOptions | TimePromptOptions): void {\n  const { value, placeholder, pattern, required, inputType } = options;\n\n  if (value !== undefined) {\n    input.val(String(value));\n  }\n\n  if (placeholder !== undefined) {\n    input.attr(\"placeholder\", placeholder);\n  }\n\n  if (pattern !== undefined) {\n    input.attr(\"pattern\", pattern);\n  }\n\n  if (required === true) {\n    input.prop({ required: true });\n  }\n\n  // These input types have extra attributes which affect their input\n  // validation.  Warning: For most browsers, date inputs are buggy in their\n  // implementation of 'step', so this attribute will have no\n  // effect. Therefore, we don't set the attribute for date inputs.  @see\n  // tslint:disable-next-line:max-line-length\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#Setting_maximum_and_minimum_dates\n  if (inputType !== \"date\") {\n    const step = (options as TimePromptOptions | NumericPromptOptions).step;\n    if (step !== undefined) {\n      const stepNumber = Number(step);\n      if (step === \"any\" || (!isNaN(stepNumber) && stepNumber > 0)) {\n        input.attr(\"step\", step);\n      }\n      else {\n        throw new Error(`\"step\" must be a valid positive number or the \\\nvalue \"any\". See \\\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step \\\nfor more information.`);\n      }\n    }\n  }\n\n  validateMinOrMaxValue(input, \"min\", options);\n  validateMinOrMaxValue(input, \"max\", options);\n}\n\nfunction validateInputOptions(inputOptions: InputOption[]): void {\n  for (const { value, text } of inputOptions) {\n    if (value === undefined || text === undefined) {\n      throw new Error(`each option needs a \"value\" and a \"text\" property`);\n    }\n\n    if (typeof value === \"number\") {\n      throw new Error(`bootprompt does not allow numbers for \"value\" in \\\ninputOptions`);\n    }\n  }\n}\n\nfunction setupSelectInput(input: JQuery, options: SelectPromptOptions): void {\n  const inputOptions = options.inputOptions !== undefined ?\n    options.inputOptions : [];\n\n  if (!Array.isArray(inputOptions)) {\n    throw new Error(\"Please pass an array of input options\");\n  }\n\n  if (inputOptions.length === 0) {\n    throw new Error(\"prompt with select requires at least one option \\\nvalue\");\n  }\n\n  const { required, multiple } = options;\n\n  if (required === true) {\n    input.prop({ required: true });\n  }\n\n  if (multiple === true) {\n    input.prop({ multiple: true });\n  }\n\n  validateInputOptions(inputOptions);\n\n  let firstValue: string | undefined;\n  const groups: Record<string, HTMLElement> = Object.create(null);\n  for (const { value, text, group } of inputOptions) {\n    // assume the element to attach to is the input...\n    let elem = input[0];\n\n    // ... but override that element if this option sits in a group\n    if (group !== undefined && group !== \"\") {\n      let groupEl = groups[group];\n      if (groupEl === undefined) {\n        groups[group] = groupEl = document.createElement(\"optgroup\");\n        groupEl.setAttribute(\"label\", group);\n      }\n\n      elem = groupEl;\n    }\n\n    const o = $(templates.option);\n    o.attr(\"value\", value).text(text);\n    elem.appendChild(o[0]);\n    if (firstValue === undefined) {\n      firstValue = value;\n    }\n  }\n\n  // Conditions are such that an undefined firstValue here is an internal error.\n  /* istanbul ignore if: we cannot cause this intentionally */\n  if (firstValue === undefined) {\n    throw new Error(\"firstValue cannot be undefined at this point\");\n  }\n\n  // tslint:disable-next-line:forin\n  for (const groupName in groups) {\n    input.append(groups[groupName]);\n  }\n\n  input.val(options.value !== undefined ? options.value : firstValue);\n}\n\nfunction setupCheckbox(input: JQuery, options: CheckboxPromptOptions,\n                       inputTemplate: string): void {\n  const checkboxValues =\n    Array.isArray(options.value) ? options.value : [options.value];\n  const inputOptions = options.inputOptions !== undefined ?\n    options.inputOptions : [];\n\n  if (inputOptions.length === 0) {\n    throw new Error(\"prompt with checkbox requires options\");\n  }\n\n  validateInputOptions(inputOptions);\n\n  for (const { value, text } of inputOptions) {\n    const checkbox = $(inputTemplate);\n\n    checkbox.find(\"input\").attr(\"value\", value);\n    checkbox.find(\"label\").append(`\\n${text}`);\n\n    if (checkboxValues.indexOf(value) !== -1) {\n      checkbox.find(\"input\").prop(\"checked\", true);\n    }\n\n    input.append(checkbox);\n  }\n}\n\nfunction setupRadio(input: JQuery, options: RadioPromptOptions,\n                    inputTemplate: string): void {\n  // Make sure that value is not an array (only a single radio can ever be\n  // checked)\n  const { value: initialValue } = options;\n  if (initialValue !== undefined && Array.isArray(initialValue)) {\n    throw new Error(`prompt with radio requires a single, non-array value \\\nfor \"value\".`);\n  }\n\n  const inputOptions = options.inputOptions !== undefined ?\n    options.inputOptions : [];\n\n  if (inputOptions.length === 0) {\n    throw new Error(\"prompt with radio requires options\");\n  }\n\n  validateInputOptions(inputOptions);\n\n  // Radiobuttons should always have an initial checked input checked in a\n  // \"group\".  If value is undefined or doesn't match an input option,\n  // select the first radiobutton\n  let checkFirstRadio = true;\n\n  for (const { value, text } of inputOptions) {\n    const radio = $(inputTemplate);\n\n    radio.find(\"input\").attr(\"value\", value);\n    radio.find(\"label\").append(`\\n${text}`);\n\n    if (initialValue !== undefined && value === initialValue) {\n      radio.find(\"input\").prop(\"checked\", true);\n      checkFirstRadio = false;\n    }\n\n    input.append(radio);\n  }\n\n  if (checkFirstRadio) {\n    input.find(\"input[type='radio']\").first().prop(\"checked\", true);\n  }\n}\n\n// tslint:disable-next-line:max-func-body-length\nfunction _prompt(options: PromptOptions,\n                 callback: PromptOptions[\"callback\"]): JQuery {\n  // prompt defaults are more complex than others in that users can override\n  // more defaults\n  const finalOptions = mergeDialogOptions(\"prompt\", [\"cancel\", \"confirm\"],\n                                          options, callback);\n  if (typeof finalOptions.value === \"number\") {\n    throw new Error(\"bootprompt does not allow numbers as values\");\n  }\n\n  // capture the user's show value; we always set this to false before spawning\n  // the dialog to give us a chance to attach some handlers to it, but we need\n  // to make sure we respect a preference not to show it\n  const shouldShow = finalOptions.show === undefined ? true : finalOptions.show;\n  // This is required prior to calling the dialog builder below - we need to add\n  // an event handler just before the prompt is shown\n  finalOptions.show = false;\n\n  // prompt-specific validation\n  if (finalOptions.title === undefined || finalOptions.title === \"\") {\n    throw new Error(\"prompt requires a title\");\n  }\n\n  const { callback: finalCallback, buttons } = finalOptions;\n  if (typeof finalCallback !== \"function\") {\n    throw new Error(\"prompt requires a callback\");\n  }\n\n  if (finalOptions.inputType === undefined) {\n    finalOptions.inputType = \"text\";\n  }\n\n  const inputTemplate = templates.inputs[finalOptions.inputType];\n  let input: JQuery;\n  switch (finalOptions.inputType) {\n    case \"text\":\n    case \"textarea\":\n    case \"email\":\n    case \"password\":\n      input = $(inputTemplate);\n      setupTextualInput(input, finalOptions);\n      break;\n    case \"date\":\n    case \"time\":\n    case \"number\":\n    case \"range\":\n      input = $(inputTemplate);\n      setupNumberLikeInput(input, finalOptions);\n      break;\n    case \"select\":\n      input = $(inputTemplate);\n      setupSelectInput(input, finalOptions);\n      break;\n    case \"checkbox\":\n      // checkboxes have to nest within a containing element\n      input = $(`<div class=\"bootprompt-checkbox-list\"></div>`);\n      setupCheckbox(input, finalOptions, inputTemplate);\n      break;\n    case \"radio\":\n      // radio buttons have to nest within a containing element\n      // tslint:disable-next-line:no-jquery-raw-elements\n      input = $(\"<div class='bootprompt-radiobutton-list'></div>\");\n      setupRadio(input, finalOptions, inputTemplate);\n      break;\n    default:\n      // The type assertion is needed in TS 3.2.4 which is the latest version\n      // that typedoc currently runs. *grumble*...\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      const q: never = finalOptions.inputType as never;\n      throw new Error(`Unknown input type: ${q}`);\n  }\n\n  const cancelCallback = function(this: JQuery): boolean | void {\n    return finalCallback.call(this, null);\n  };\n\n  (buttons.cancel as Button).callback = cancelCallback;\n\n  setupEscapeAndCloseCallbacks(finalOptions, cancelCallback);\n  // Prompt submitted - extract the prompt value. This requires a bit of work,\n  // given the different input types available.\n  // tslint:disable-next-line:no-non-null-assertion\n  (buttons.confirm as Button).callback = function(this: JQuery):\n  boolean | void {\n    let value: string | string[];\n\n    switch (finalOptions.inputType) {\n      case \"checkbox\":\n        value = input.find(\"input:checked\")\n          .map(function(this: HTMLElement): string {\n            return $(this).val() as string;\n          }).get();\n        break;\n      case \"radio\":\n        value = input.find(\"input:checked\").val() as string;\n        break;\n      default:\n        const rawInput = input[0] as unknown as { checkValidity(): boolean };\n        if (rawInput.checkValidity !== undefined && !rawInput.checkValidity()) {\n          // prevents button callback from being called\n          return false;\n        }\n\n        if (finalOptions.inputType === \"select\" &&\n            finalOptions.multiple === true) {\n          value = input.find(\"option:selected\")\n            .map(function(this: HTMLElement): string {\n              return $(this).val() as string;\n            }).get();\n        }\n        else {\n          value = input.val() as string;\n        }\n    }\n\n    // TS type inferrence fails here.\n    // tslint:disable-next-line:no-any\n    return (finalCallback as any).call(this, value);\n  };\n\n  const form = $(templates.form);\n  form.append(input);\n\n  const { message } = finalOptions;\n  if (typeof message === \"string\" && message.trim() !== \"\") {\n    // Add the form to whatever content the user may have added.\n    // tslint:disable-next-line:no-inner-html\n    form.prepend($(templates.promptMessage).html(message));\n  }\n\n  finalOptions.message = form;\n\n  // Generate the dialog\n  const promptDialog = dialog(finalOptions);\n\n  form.on(\"submit\", e => {\n    e.preventDefault();\n    // Fix for SammyJS (or similar JS routing library) hijacking the form post.\n    e.stopPropagation();\n\n    // tslint:disable-next-line:no-suspicious-comment\n    // @TODO can we actually click *the* button object instead?\n    // e.g. buttons.confirm.click() or similar\n    promptDialog.find(\".bootprompt-accept\").trigger(\"click\");\n  });\n\n  // clear the existing handler focusing the submit button...\n  // ...and replace it with one focusing our input, if possible\n  promptDialog.off(\"shown.bs.modal\").on(\"shown.bs.modal\", () => {\n    input.focus();\n  });\n\n  if (shouldShow === true) {\n    promptDialog.modal(\"show\");\n  }\n\n  return promptDialog;\n}\n\n/**\n * This specialized function provides a dialog similar to the one provided by\n * the DOM ``prompt()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should be placed within the callback function for\n * this dialog.\n *\n * @param options The options governing how the dialog is created.\n *\n * @returns A jQuery object that models the dialog.\n */\nexport function prompt(options: PromptOptions): JQuery;\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``prompt()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should be placed within the callback function for\n * this dialog.\n *\n * @param message The message to display.\n *\n * @param callback The callback to call when the dialog has been dismissed.\n *\n * @returns A jQuery object that models the dialog.\n */\nexport function prompt(message: string,\n                       callback: PromptOptions[\"callback\"]): JQuery;\n// tslint:disable-next-line:max-func-body-length\nexport function prompt(messageOrOptions: string | PromptOptions,\n                       callback?: PromptOptions[\"callback\"]): JQuery {\n  return _prompt(typeof messageOrOptions === \"string\" ?\n                 { title: messageOrOptions } :\n                 messageOrOptions, callback);\n}\n\nexport type PromiseValue<T extends PromptOptions> =\n  PromptOptionsToValue<T> | null;\n\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``confirm()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should await the promise returned by this function.\n *\n * @param message The dialog title.\n *\n * @returns A promise that resolves once the dialog has been dismissed.\n */\nexport async function prompt$(message: string): Promise<string | null>;\n/**\n * Specialized function that provides a dialog similar to the one provided by\n * the DOM ``confirm()`` function.\n *\n * **NOTE**: This function is non-blocking, so any code that must happen after\n * the dialog is dismissed should await the promise returned by this function.\n *\n * @param messageOrOptions An object specifying the options for the dialog.\n *\n * @returns A promise that resolves once the dialog has been dismissed.\n */\nexport async function prompt$<T extends PromptOptions>(options: T):\nPromise<PromiseValue<T>>;\nexport async function prompt$<T extends PromptOptions>(\n  messageOrOptions: string | T):\nPromise<PromiseValue<T>> {\n  return new Promise(resolve => {\n    const options = typeof messageOrOptions === \"string\" ?\n      // tslint:disable-next-line:no-object-literal-type-assertion\n      { title: messageOrOptions } as T : messageOrOptions;\n    const { callback } = options;\n\n    let result: PromiseValue<T> = null;\n    _prompt(options, function(this: JQuery,\n                              value: PromiseValue<T>): boolean | void {\n      result = value;\n\n      if (callback !== undefined) {\n        // We assert the type of callback because TS's type inference fails\n        // here.\n        // tslint:disable-next-line:no-any\n        return (callback as any).call(this, result);\n      }\n    }).one(\"hidden.bs.modal\", () => {\n      resolve(result);\n    });\n  });\n}\n\n//\n// INTERNAL FUNCTIONS\n//\n\nfunction setupEscapeAndCloseCallbacks(options: DialogOptions,\n                                      callback: ButtonCallback):\nvoid {\n  const { onEscape, onClose } = options;\n  options.onEscape = (onEscape === undefined || onEscape === true) ?\n    callback :\n    function(this: JQuery, ev: JQuery.TriggeredEvent): boolean | void {\n      if (onEscape === false || onEscape.call(this, ev) === false) {\n        return false;\n      }\n\n      return callback.call(this, ev);\n    };\n\n  options.onClose = onClose === undefined ?\n    callback :\n    function(this: JQuery, ev: JQuery.TriggeredEvent): boolean | void {\n      if (onClose.call(this, ev) === false) {\n        return false;\n      }\n\n      return callback.call(this, ev);\n    };\n}\n\n/**\n * Get localized text from a locale. Defaults to ``en`` locale if no locale\n * provided or a non-registered locale is requested.\n *\n * @param key The field to get from the locale.\n *\n * @param locale The locale name.\n *\n * @returns The field from the locale.\n */\nfunction getText(key: LocaleField, locale: string): string {\n  const labels = definedLocales[locale];\n\n  return labels !== undefined ? labels[key] : definedLocales.en[key];\n}\n\ntype ButtonName = \"ok\" | \"cancel\" | \"confirm\";\n\n/**\n *\n * Make buttons from a series of labels. All this does is normalise the given\n * labels and translate them where possible.\n *\n * @param labels The button labels.\n *\n * @param locale A locale name.\n *\n * @returns The created buttons.\n *\n */\nfunction makeButtons(labels: ButtonName[], locale: string): Buttons {\n  const buttons: Buttons = Object.create(null);\n\n  for (const label of labels) {\n    buttons[label.toLowerCase()] = {\n      label: getText(label.toUpperCase() as LocaleField, locale),\n    };\n  }\n\n  return buttons;\n}\n\ntype SpecializedOptions = AlertOptions | ConfirmOptions | PromptOptions;\n\n/**\n * Produce a DialogOptions object from the options, or arguments passed to the\n * specialized functions (alert, confirm, prompt).\n *\n * @param kind The kind of specialized function that was called.\n *\n * @param labels The button labels that the specialized function uses.\n *\n * @param options: The first argument of the specialized functions is either an\n * options object, or a string. The value of that first argument must be passed\n * here.\n *\n * @returns Options to pass to [[dialog]].\n */\nfunction mergeDialogOptions<T extends SpecializedOptions>(\n  kind: string,\n  labels: ButtonName[],\n  options: T,\n  callback?: T[\"callback\"]):\nT & DialogOptions & { buttons: Buttons } {\n  // An earlier implementation was building a hash from ``buttons``. However,\n  // the ``buttons`` array is very small. Profiling in other projects have shown\n  // that for very small arrays, there's no benefit to creating a table for\n  // lookup.\n  //\n  // An earlier implementation was also performing the check on the merged\n  // options (the return value of this function) but that was pointless as it is\n  // not possible to add invalid buttons with makeButtons.\n  //\n  for (const key in options.buttons) {\n    // tslint:disable-next-line:no-any\n    if (labels.indexOf(key as any) === -1) {\n      throw new Error(`button key \"${key}\" is not allowed (options are \\\n${labels.join(\" \")})`);\n    }\n  }\n\n  const { locale, swapButtonOrder } = options;\n\n  return $.extend(\n    true, // deep merge\n    Object.create(null), {\n      className: `bootprompt-${kind}`,\n      buttons: makeButtons(swapButtonOrder === true ? labels.slice().reverse() :\n                           labels,\n                           locale !== undefined ? locale : currentLocale),\n    },\n    options,\n    { callback }) as T & DialogOptions & { buttons: Buttons };\n}\n\n//  Filter and tidy up any user supplied parameters to this dialog.\n//  Also looks for any shorthands used and ensures that the options\n//  which are returned are all normalized properly\nfunction sanitize(options: DialogOptions): SanitizedDialogOptions {\n  if (typeof options !== \"object\") {\n    throw new Error(\"Please supply an object of options\");\n  }\n\n  if (options.message === undefined) {\n    throw new Error(\"Please specify a message\");\n  }\n\n  const finalOptions = {\n    locale: currentLocale,\n    backdrop: \"static\",\n    animate,\n    closeButton: true,\n    show: true,\n    container: document.body,\n    ...options};\n\n  // no buttons is still a valid dialog but it's cleaner to always have\n  // a buttons object to iterate over, even if it's empty\n  let { buttons } = finalOptions;\n  if (buttons === undefined) {\n    buttons = finalOptions.buttons = Object.create(null) as {};\n  }\n\n  const total = Object.keys(buttons).length;\n\n  let index = 0;\n  // tslint:disable-next-line:forin\n  for (const key in buttons) {\n    let button = buttons[key];\n    if (typeof button === \"function\") {\n      // short form, assume value is our callback. Since button\n      // isn't an object it isn't a reference either so re-assign it\n      button = buttons[key] = {\n        callback: button,\n      };\n    }\n\n    // before any further checks make sure by now button is the correct type\n    if (typeof button !== \"object\") {\n      throw new Error(`button with key \"${key}\" must be an object`);\n    }\n\n    if (button.label === undefined) {\n      // the lack of an explicit label means we'll assume the key is good enough\n      button.label = key;\n    }\n\n    if (button.className === undefined) {\n      const isPrimary =\n        index === (finalOptions.swapButtonOrder === true ? 0 : total - 1);\n\n      // always add a primary to the main option in a one or two-button dialog\n      button.className = (total <= 2 && isPrimary) ?\n        \"btn-primary\" :\n        \"btn-secondary btn-default\";\n    }\n    index++;\n  }\n\n  // TS cannot infer that we have SanitizedDialogOptions at this point.\n  return finalOptions as SanitizedDialogOptions;\n}\n\nfunction throwMaxMinError(name: string): never {\n  throw new Error(`\"max\" must be greater than \"min\". See \\\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-${name} \\\nfor more information.`);\n}\n\n//  Handle the invoked dialog callback\nfunction processCallback(e: JQuery.TriggeredEvent,\n                         $forDialog: JQuery,\n                         callback:\n                         ((this: JQuery,\n                           e: JQuery.TriggeredEvent) => boolean | void) |\n                         boolean | undefined):\nvoid {\n  e.stopPropagation();\n  e.preventDefault();\n\n  // By default we assume a callback will get rid of the dialog, although it is\n  // given the opportunity to override this so, if the callback can be invoked\n  // and it *explicitly returns false* then we keep the dialog active...\n  // otherwise we'll bin it\n  if (!(typeof callback === \"function\" &&\n        callback.call($forDialog, e) === false)) {\n    $forDialog.modal(\"hide\");\n  }\n}\n\n// Helper function, since the logic for validating min and max attributes is\n// almost identical\nfunction validateMinOrMaxValue(input: JQuery,\n                               name: \"min\" | \"max\",\n                               options: NumericPromptOptions |\n                               DatePromptOptions | TimePromptOptions): void {\n  const value = options[name];\n  if (value === undefined) {\n    return;\n  }\n\n  const compareValue = options[name === \"min\" ? \"max\" : \"min\"];\n  input.attr(name, value);\n\n  const { min , max } = options;\n\n  // Type inference fails to realize the real type of value...\n  switch (options.inputType) {\n    case \"date\":\n      /* istanbul ignore if: we don't test the positive case */\n      if (!/(\\d{4})-(\\d{2})-(\\d{2})/.test(value)) {\n        // tslint:disable-next-line:no-console\n        console.warn(`Browsers which natively support the \"date\" input type \\\nexpect date values to be of the form \"YYYY-MM-DD\" (see ISO-8601 \\\nhttps://www.iso.org/iso-8601-date-and-time-format.html). Bootprompt does not \\\nenforce this rule, but your ${name} value may not be enforced by this \\\nbrowser.`);\n      }\n      break;\n    case \"time\":\n      if (!/([01][0-9]|2[0-3]):[0-5][0-9]?:[0-5][0-9]/.test(value)) {\n        throw new Error(`\"${name}\" is not a valid time. See \\\nhttps://www.w3.org/TR/2012/WD-html-markup-20120315/datatypes.html\\\n#form.data.time for more information.`);\n      }\n\n      // tslint:disable-next-line:no-non-null-assertion\n      if (!(compareValue === undefined || max! > min!)) {\n        return throwMaxMinError(name);\n      }\n      break;\n    default:\n      // Yes we force the string into isNaN. It works.\n      if (isNaN(value as unknown as number)) {\n        throw new Error(`\"${name}\" must be a valid number. See \\\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-${name} \\\nfor more information.`);\n      }\n\n      const minNumber = Number(min);\n      const maxNumber = Number(max);\n\n      // tslint:disable-next-line:no-non-null-assertion\n      if (!(compareValue === undefined || maxNumber > minNumber) &&\n          // Yes we force the string into isNaN. It works.\n          !isNaN(compareValue as unknown as number)) {\n        return throwMaxMinError(name);\n      }\n  }\n}\n\n//  Register the default locale\naddLocale(\"en\", {\n  OK: \"OK\",\n  CANCEL: \"Cancel\",\n  CONFIRM: \"OK\",\n});\n"],"names":["LOCALE_FIELDS","definedLocales","Object","create","templates","dialog","header","footer","closeButton","form","button","option","promptMessage","inputs","text","textarea","email","select","checkbox","radio","date","time","number","password","range","currentLocale","animate","addLocale","name","values","LOCALE_FIELDS_1","__values","field","Error","fnModal","$","fn","modal","undefined","Constructor","VERSION","fullBootstrapVersion","bootstrapVersion","Number","substring","indexOf","options","finalOptions","message","locale","backdrop","show","container","document","body","buttons","total","keys","length","index","key","callback","label","className","isPrimary","swapButtonOrder","sanitize","$modal","innerDialog","getElementsByClassName","callbacks","onEscape","onClose","size","title","bpBody","innerHTML","append","hadButtons","b","$button","data","_c","split","cl","classList","add","appendChild","parentNode","insertBefore","nextSibling","_e","console","warn","modalTitle","closeButtonEl","modalHeader","firstChild","centerVertical","one","off","remove","querySelector","trigger","on","e","backdrops","target","currentTarget","processCallback","callbackKey","this","which","keyboard","_alert","mergeDialogOptions","finalCallback","customCallback","call","ok","setupEscapeAndCloseCallbacks","_confirm","cancelCallback","cancel","confirm","validateInputOptions","inputOptions","inputOptions_1","_b","value","_prompt","shouldShow","inputType","input","inputTemplate","placeholder","pattern","maxlength","required","val","attr","prop","setupTextualInput","String","step","stepNumber","isNaN","validateMinOrMaxValue","setupNumberLikeInput","Array","isArray","firstValue","multiple","groups","inputOptions_2","group","elem","groupEl","createElement","setAttribute","o","groupName","setupSelectInput","checkboxValues","inputOptions_3","find","setupCheckbox","initialValue","checkFirstRadio","inputOptions_4","first","setupRadio","q","map","get","rawInput","checkValidity","trim","prepend","html","promptDialog","preventDefault","stopPropagation","focus","ev","getText","labels","en","makeButtons","labels_1","toLowerCase","toUpperCase","kind","join","extend","slice","reverse","throwMaxMinError","$forDialog","compareValue","min","max","test","minNumber","maxNumber","OK","CANCEL","CONFIRM","messageOrOptions","Promise","resolve","result"],"mappings":"q+DA0BMA,EAA+B,CAAC,KAAO,SAAU,WAEjDC,EAA6CC,OAAOC,OAAO,MAy2B3DC,EAAY,CAChBC,OAAQ,iOAQRC,OAAQ,iEAIRC,OAAQ,mCACRC,YAAa,oGAGbC,KAAM,wCACNC,OAAQ,8CACRC,OAAQ,oBACRC,cAAe,gDACfC,OAAQ,CACNC,KAAM,uGAGNC,SAAU,wFAGVC,MAAO,yGAGPC,OAAQ,kFAGRC,SAAU,yLAKVC,MAAO,qMAKPC,KAAM,uGAGNC,KAAM,uGAGNC,OAAQ,kHAGRC,SAAU,+GAGVC,MAAO,kHAMPC,EAAgB,KAChBC,GAAU,WAmCEC,EAAUC,EAAcC,eACtC,IAAoB,IAAAC,EAAAC,EAAA/B,iCAAe,CAA9B,IAAMgC,UACT,GAA6B,iBAAlBH,EAAOG,GAChB,MAAM,IAAIC,MAAM,oCAAoCD,yGAIxD/B,EAAe2B,GAAQC,EAqDzB,IAAMK,EAAUC,EAAEC,GAAGC,MAErB,QAAgBC,IAAZJ,EACF,MAAM,IAAID,MACR,kKAMJ,IAAKC,EAAQK,YAAYC,QACvB,MAAM,IAAIP,MAAM,6DAGlB,IAAMQ,EAAuBP,EAAQK,YAAYC,QAC3CE,EACJC,OAAOF,EAAqBG,UAAU,EACAH,EAAqBI,QAAQ,OAGrE,GAAIH,EAAmB,EACrB,MAAM,IAAIT,MAAM,iEAWF5B,EAAOyC,eACfC,EA2/BR,SAAkBD,GAChB,GAAuB,iBAAZA,EACT,MAAM,IAAIb,MAAM,sCAGlB,QAAwBK,IAApBQ,EAAQE,QACV,MAAM,IAAIf,MAAM,4BAGlB,IAAMc,KACJE,OAAQxB,EACRyB,SAAU,SACVxB,UACAlB,aAAa,EACb2C,MAAM,EACNC,UAAWC,SAASC,MACjBR,GAICS,iBACUjB,IAAZiB,IACFA,EAAUR,EAAaQ,QAAUrD,OAAOC,OAAO,OAGjD,IAAMqD,EAAQtD,OAAOuD,KAAKF,GAASG,OAE/BC,EAAQ,EAEZ,IAAK,IAAMC,KAAOL,EAAS,CACzB,IAAI7C,EAAS6C,EAAQK,GAUrB,GATsB,mBAAXlD,IAGTA,EAAS6C,EAAQK,GAAO,CACtBC,SAAUnD,IAKQ,iBAAXA,EACT,MAAM,IAAIuB,MAAM,oBAAoB2B,yBAQtC,QALqBtB,IAAjB5B,EAAOoD,QAETpD,EAAOoD,MAAQF,QAGQtB,IAArB5B,EAAOqD,UAAyB,CAClC,IAAMC,EACJL,MAA4C,IAAjCZ,EAAakB,gBAA2B,EAAIT,EAAQ,GAGjE9C,EAAOqD,UAAaP,GAAS,GAAKQ,EAChC,cACA,4BAEJL,IAIF,OAAOZ,EAzjCcmB,CAASpB,GAExBqB,EAAShC,EAAE/B,EAAUC,QACrBgC,EAAQ8B,EAAO,GACfC,EAAc/B,EAAMgC,uBAAuB,gBAAgB,GAC3Df,EAAOjB,EAAMgC,uBAAuB,cAAc,GAClD9D,EAAS4B,EAAE/B,EAAUG,QAAQ,GAE7B+D,EAAkE,CACtEC,SAAUxB,EAAawB,SACvBC,QAASzB,EAAayB,cAGGlC,IAAvBgC,EAAUC,WACZD,EAAUC,UAAW,GAGf,IAAAhB,YAASL,aAAUa,cAAWvD,gBAAawC,YAASyB,SACpDC,UAEFC,EAASrB,EAAKe,uBAAuB,mBAAmB,GACvC,iBAAZrB,EAET2B,EAAOC,UAAY5B,GAInB2B,EAAOC,UAAY,GACnBzC,EAAEwC,GAAQE,OAAO7B,IAGnB,IAAI8B,GAAa,EAEjB,IAAK,IAAMlB,KAAOL,EAAS,CACzBuB,GAAa,EACb,IAAMC,EAAIxB,EAAQK,GACZoB,EAAU7C,EAAE/B,EAAUM,QACtBA,EAASsE,EAAQ,GACvBA,EAAQC,KAAK,aAAcrB,OAE3B,IAAiB,IAAAsB,EAAAnD,EAAAgD,EAAEhB,UAAUoB,MAAM,oCAAM,CAApC,IAAMC,UACT1E,EAAO2E,UAAUC,IAAIF,qGAGvB,OAAQxB,GACN,IAAK,KACL,IAAK,UACHlD,EAAO2E,UAAUC,IAAI,qBACrB,MAEF,IAAK,SACH5E,EAAO2E,UAAUC,IAAI,qBAMzB5E,EAAOkE,UAAYG,EAAEjB,MACrBvD,EAAOgF,YAAY7E,GAEnB4D,EAAUV,GAAOmB,EAAElB,SAcrB,GATIiB,GAEFxB,EAAKkC,WAAYC,aAAalF,EAAQ+C,EAAKoC,cAGhB,IAAzB3C,EAAarB,SACfW,EAAMgD,UAAUC,IAAI,aAGJhD,IAAdyB,MAEF,IAAiB,IAAA4B,EAAA5D,EAAAgC,EAAUoB,MAAM,oCAAM,CAA5BC,UACT/C,EAAMgD,UAAUC,IAAIF,qGAIxB,QAAa9C,IAATmC,EASF,OANIhC,EAAqBG,UAAU,EAAG,GAAK,OAEzCgD,QAAQC,KAAK,qEACLpD,0CAGFgC,GACN,IAAK,QACHL,EAAYiB,UAAUC,IAAI,YAC1B,MACF,IAAK,QACHlB,EAAYiB,UAAUC,IAAI,YAC1B,MACF,QAEE,MAAM,IAAIrD,MAAM,uBADCwC,GAKvB,QAAcnC,IAAVoC,EAAqB,CAEvBpB,EAAKkC,WAAYC,aAAatD,EAAE/B,EAAUE,QAAQ,GAAIgD,GACtD,IAAMwC,EAAazD,EAAMgC,uBAAuB,eAAe,GAC1C,iBAAVK,EAEToB,EAAWlB,UAAYF,GAIvBoB,EAAWlB,UAAY,GACvBzC,EAAE2D,GAAYjB,OAAOH,IAIzB,IAAoB,IAAhBlE,EAAsB,CACxB,IAAMuF,EAAgB5D,EAAE/B,EAAUI,aAAa,GAE/C,QAAc8B,IAAVoC,EAAqB,CACvB,IAAMsB,EAAc3D,EAAMgC,uBAAuB,gBAAgB,GAE7D3B,EAAmB,EACrBsD,EAAYT,YAAYQ,GAGxBC,EAAYP,aAAaM,EAAeC,EAAYC,iBAGtD3C,EAAKmC,aAAaM,EAAezC,EAAK2C,YA0G1C,YAtGoC3D,IAAhCS,EAAamD,iBAGXzD,EAAuB,SAEzBmD,QAAQC,KAAK,+EACcpD,0CAI7B2B,EAAYiB,UAAUC,IAAI,0BAM5BnB,EAAOgC,IAAI,kBAAmB,WAC5BhC,EAAOiC,IAAI,mBACXjC,EAAOiC,IAAI,SACXjC,EAAOkC,WAGTlC,EAAOgC,IAAI,iBAAkB,WAE3BhE,EAAEE,EAAMiE,cAAc,iBAAkBC,QAAQ,WAMjC,WAAbrD,GASFiB,EAAOqC,GAAG,yBAA0B,SAACC,GAGnC,IAAMC,EACJrE,EAAMgC,uBAAuB,kBAEzBsC,EAA8B,IAArBD,EAAUhD,OAEvBgD,EAAU,GACVD,EAAEG,cAEAH,EAAEE,SAAWA,GAIjBxC,EAAOoC,QAAQ,qBAInBpC,EAAOqC,GAAG,kBAAmB,SAACC,IAID,IAAvBnC,EAAUC,UACoB,mBAAvBD,EAAUC,UACnBsC,EAAgBJ,EAAGtC,EAAQG,EAAUC,YAIzCJ,EAAOqC,GAAG,QAAS,uBACT,SAAwBC,GACrB,IAAMK,EAAc3E,EAAE4E,MAAM9B,KAAK,cAEjC4B,EAAgBJ,EAAGtC,EAAQG,EAAUwC,MAGlD3C,EAAOqC,GAAG,QAAS,2BAA4B,SAAAC,GAI7CI,EAAgBJ,EAAGtC,EAAQG,EAAUE,WAGvCL,EAAOqC,GAAG,QAAS,SAAAC,GACD,KAAZA,EAAEO,OACJ7C,EAAOoC,QAAQ,qBAMnBpE,EAAEY,EAAaK,WAAqByB,OAAOV,GAE3CA,EAAO9B,MAAM,CACXa,WAAwB,IAAbA,GAAkC,WAAbA,IAAyB,SACzD+D,UAAU,EACV9D,MAAM,KAGkB,IAAtBJ,EAAaI,MACfgB,EAAO9B,MAAM,QAGR8B,EAGT,SAAS+C,EAAOpE,EACAe,GACd,IAAMd,EAAeoE,EAAmB,QAAS,CAAC,MAAOrE,EAASe,GAE1DuD,aAKR,QAAsB9E,IAAlB8E,GAAwD,mBAAlBA,EACxC,MAAM,IAAInF,MAAM,mEAIlB,IAAMoF,EAAiB,WACrB,MAAgC,mBAAlBD,GACZA,EAAcE,KAAKP,OAOvB,OAJChE,EAAaQ,QAAQgE,GAAc1D,SAAWwD,EAE/CG,EAA6BzE,EAAcsE,GAEpChH,EAAO0C,GA+DhB,SAAS0E,EAAS3E,EACAe,GAChB,IAAMd,EAAeoE,EAAmB,UAAW,CAAC,SAAU,WACtBrE,EAASe,GAEzCuD,aAAyB7D,YAIjC,GAA6B,mBAAlB6D,EACT,MAAM,IAAInF,MAAM,+BAGlB,IAAMyF,EAAiB,WACrB,OAAON,EAAcE,KAAKP,MAAM,IAYlC,OATCxD,EAAQoE,OAAkB9D,SAAW6D,EAEtCF,EAA6BzE,EAAc2E,GAE1CnE,EAAQqE,QAAmB/D,SAC1B,WACE,OAAOuD,EAAcE,KAAKP,MAAM,IAG7B1G,EAAO0C,GA8IhB,SAAS8E,EAAqBC,eAC5B,IAA8B,IAAAC,EAAAhG,EAAA+F,iCAAc,CAAjC,IAAAE,UAAEC,UAAOnH,SAClB,QAAcwB,IAAV2F,QAAgC3F,IAATxB,EACzB,MAAM,IAAImB,MAAM,qDAGlB,GAAqB,iBAAVgG,EACT,MAAM,IAAIhG,MAAM,oKA6ItB,SAASiG,EAAQpF,EACAe,GAGf,IAAMd,EAAeoE,EAAmB,SAAU,CAAC,SAAU,WACrBrE,EAASe,GACjD,GAAkC,iBAAvBd,EAAakF,MACtB,MAAM,IAAIhG,MAAM,+CAMlB,IAAMkG,OAAmC7F,IAAtBS,EAAaI,MAA4BJ,EAAaI,KAMzE,GAHAJ,EAAaI,MAAO,OAGOb,IAAvBS,EAAa2B,OAA8C,KAAvB3B,EAAa2B,MACnD,MAAM,IAAIzC,MAAM,2BAGV,IAAAmF,aAAyB7D,YACjC,GAA6B,mBAAlB6D,EACT,MAAM,IAAInF,MAAM,mCAGaK,IAA3BS,EAAaqF,YACfrF,EAAaqF,UAAY,QAG3B,IACIC,EADEC,EAAgBlI,EAAUS,OAAOkC,EAAaqF,WAEpD,OAAQrF,EAAaqF,WACnB,IAAK,OACL,IAAK,WACL,IAAK,QACL,IAAK,YAjQT,SAA2BC,EACAvF,GACjB,IAAAmF,UAAOM,gBAAaC,YAASC,cAAWC,aAGhDL,EAAMM,IAAIV,QAEU3F,IAAhBiG,GACFF,EAAMO,KAAK,cAAeL,QAGZjG,IAAZkG,GACFH,EAAMO,KAAK,UAAWJ,QAGNlG,IAAdmG,GACFJ,EAAMO,KAAK,YAAaH,IAGT,IAAbC,GACFL,EAAMQ,KAAK,CAAEH,UAAU,KA+OrBI,CADAT,EAAQlG,EAAEmG,GACevF,GACzB,MACF,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,SAhPT,SAA8BsF,EACAvF,GAEpB,IAAAmF,UAAOM,gBAAaC,YAASE,aAAUN,cAwB/C,QAtBc9F,IAAV2F,GACFI,EAAMM,IAAII,OAAOd,SAGC3F,IAAhBiG,GACFF,EAAMO,KAAK,cAAeL,QAGZjG,IAAZkG,GACFH,EAAMO,KAAK,UAAWJ,IAGP,IAAbE,GACFL,EAAMQ,KAAK,CAAEH,UAAU,IASP,SAAdN,EAAsB,CACxB,IAAMY,EAAQlG,EAAqDkG,KACnE,QAAa1G,IAAT0G,EAAoB,CACtB,IAAMC,EAAatG,OAAOqG,GAC1B,KAAa,QAATA,IAAoBE,MAAMD,IAAeA,EAAa,GAIxD,MAAM,IAAIhH,MAAM,kKAHhBoG,EAAMO,KAAK,OAAQI,IAWzBG,EAAsBd,EAAO,MAAOvF,GACpCqG,EAAsBd,EAAO,MAAOvF,IAsMhCsG,CADAf,EAAQlG,EAAEmG,GACkBvF,GAC5B,MACF,IAAK,UAxLT,SAA0BsF,EAAevF,WACjCgF,OAAwCxF,IAAzBQ,EAAQgF,aAC3BhF,EAAQgF,aAAe,GAEzB,IAAKuB,MAAMC,QAAQxB,GACjB,MAAM,IAAI7F,MAAM,yCAGlB,GAA4B,IAAxB6F,EAAapE,OACf,MAAM,IAAIzB,MAAM,yDAIV,IAYJsH,EAZIb,aAAUc,cAED,IAAbd,GACFL,EAAMQ,KAAK,CAAEH,UAAU,KAGR,IAAbc,GACFnB,EAAMQ,KAAK,CAAEW,UAAU,IAGzB3B,EAAqBC,GAGrB,IAAM2B,EAAsCvJ,OAAOC,OAAO,UAC1D,IAAqC,IAAAuJ,EAAA3H,EAAA+F,iCAAc,CAAxC,IAAAE,UAAEC,UAAOnH,SAAM6I,UAEpBC,EAAOvB,EAAM,GAGjB,QAAc/F,IAAVqH,GAAiC,KAAVA,EAAc,CACvC,IAAIE,EAAUJ,EAAOE,QACLrH,IAAZuH,IACFJ,EAAOE,GAASE,EAAUxG,SAASyG,cAAc,YACjDD,EAAQE,aAAa,QAASJ,IAGhCC,EAAOC,EAGT,IAAMG,EAAI7H,EAAE/B,EAAUO,QACtBqJ,EAAEpB,KAAK,QAASX,GAAOnH,KAAKA,GAC5B8I,EAAKrE,YAAYyE,EAAE,SACA1H,IAAfiH,IACFA,EAAatB,qGAMjB,QAAmB3F,IAAfiH,EACF,MAAM,IAAItH,MAAM,gDAIlB,IAAK,IAAMgI,KAAaR,EACtBpB,EAAMxD,OAAO4E,EAAOQ,IAGtB5B,EAAMM,SAAsBrG,IAAlBQ,EAAQmF,MAAsBnF,EAAQmF,MAAQsB,IA6HpDW,CADA7B,EAAQlG,EAAEmG,GACcvF,GACxB,MACF,IAAK,YA5HT,SAAuBsF,EAAevF,EACfwF,WACf6B,EACJd,MAAMC,QAAQxG,EAAQmF,OAASnF,EAAQmF,MAAQ,CAACnF,EAAQmF,OACpDH,OAAwCxF,IAAzBQ,EAAQgF,aAC3BhF,EAAQgF,aAAe,GAEzB,GAA4B,IAAxBA,EAAapE,OACf,MAAM,IAAIzB,MAAM,yCAGlB4F,EAAqBC,OAErB,IAA8B,IAAAsC,EAAArI,EAAA+F,iCAAc,CAAjC,IAAAE,UAAEC,UAAOnH,SACZI,EAAWiB,EAAEmG,GAEnBpH,EAASmJ,KAAK,SAASzB,KAAK,QAASX,GACrC/G,EAASmJ,KAAK,SAASxF,OAAO,KAAK/D,IAEI,IAAnCqJ,EAAetH,QAAQoF,IACzB/G,EAASmJ,KAAK,SAASxB,KAAK,WAAW,GAGzCR,EAAMxD,OAAO3D,uGAwGXoJ,CADAjC,EAAQlG,EAAE,gDACWY,EAAcuF,GACnC,MACF,IAAK,SAtGT,SAAoBD,EAAevF,EACfwF,WAGViC,UACR,QAAqBjI,IAAjBiI,GAA8BlB,MAAMC,QAAQiB,GAC9C,MAAM,IAAItI,MAAM,qEAIlB,IAAM6F,OAAwCxF,IAAzBQ,EAAQgF,aAC3BhF,EAAQgF,aAAe,GAEzB,GAA4B,IAAxBA,EAAapE,OACf,MAAM,IAAIzB,MAAM,sCAGlB4F,EAAqBC,GAKrB,IAAI0C,GAAkB,MAEtB,IAA8B,IAAAC,EAAA1I,EAAA+F,iCAAc,CAAjC,IAAAE,UAAEC,UAAOnH,SACZK,EAAQgB,EAAEmG,GAEhBnH,EAAMkJ,KAAK,SAASzB,KAAK,QAASX,GAClC9G,EAAMkJ,KAAK,SAASxF,OAAO,KAAK/D,QAEXwB,IAAjBiI,GAA8BtC,IAAUsC,IAC1CpJ,EAAMkJ,KAAK,SAASxB,KAAK,WAAW,GACpC2B,GAAkB,GAGpBnC,EAAMxD,OAAO1D,qGAGXqJ,GACFnC,EAAMgC,KAAK,uBAAuBK,QAAQ7B,KAAK,WAAW,IAmExD8B,CADAtC,EAAQlG,EAAE,mDACQY,EAAcuF,GAChC,MACF,QAIE,IAAMsC,EAAW7H,EAAaqF,UAC9B,MAAM,IAAInG,MAAM,uBAAuB2I,GAG3C,IAAMlD,EAAiB,WACrB,OAAON,EAAcE,KAAKP,KAAM,OAGjCxD,EAAQoE,OAAkB9D,SAAW6D,EAEtCF,EAA6BzE,EAAc2E,GAI1CnE,EAAQqE,QAAmB/D,SAAW,WAErC,IAAIoE,EAEJ,OAAQlF,EAAaqF,WACnB,IAAK,WACHH,EAAQI,EAAMgC,KAAK,iBAChBQ,IAAI,WACH,OAAO1I,EAAE4E,MAAM4B,QACdmC,MACL,MACF,IAAK,QACH7C,EAAQI,EAAMgC,KAAK,iBAAiB1B,MACpC,MACF,QACE,IAAMoC,EAAW1C,EAAM,GACvB,QAA+B/F,IAA3ByI,EAASC,gBAAgCD,EAASC,gBAEpD,OAAO,EAKP/C,EAF6B,WAA3BlF,EAAaqF,YACa,IAA1BrF,EAAayG,SACPnB,EAAMgC,KAAK,mBAChBQ,IAAI,WACH,OAAO1I,EAAE4E,MAAM4B,QACdmC,MAGGzC,EAAMM,MAMpB,OAAQvB,EAAsBE,KAAKP,KAAMkB,IAG3C,IAAMxH,EAAO0B,EAAE/B,EAAUK,MACzBA,EAAKoE,OAAOwD,GAEJ,IAAArF,YACe,iBAAZA,GAA2C,KAAnBA,EAAQiI,QAGzCxK,EAAKyK,QAAQ/I,EAAE/B,EAAUQ,eAAeuK,KAAKnI,IAG/CD,EAAaC,QAAUvC,EAGvB,IAAM2K,EAAe/K,EAAO0C,GAuB5B,OArBAtC,EAAK+F,GAAG,SAAU,SAAAC,GAChBA,EAAE4E,iBAEF5E,EAAE6E,kBAKFF,EAAaf,KAAK,sBAAsB9D,QAAQ,WAKlD6E,EAAahF,IAAI,kBAAkBI,GAAG,iBAAkB,WACtD6B,EAAMkD,WAGW,IAAfpD,GACFiD,EAAa/I,MAAM,QAGd+I,EAkGT,SAAS5D,EAA6B1E,EACAe,GAE5B,IAAAU,aAAUC,YAClB1B,EAAQyB,cAAyBjC,IAAbiC,IAAuC,IAAbA,EAC5CV,EACA,SAAuB2H,GACrB,OAAiB,IAAbjH,IAAkD,IAA5BA,EAAS+C,KAAKP,KAAMyE,IAIvC3H,EAASyD,KAAKP,KAAMyE,IAG/B1I,EAAQ0B,aAAsBlC,IAAZkC,EAChBX,EACA,SAAuB2H,GACrB,OAA+B,IAA3BhH,EAAQ8C,KAAKP,KAAMyE,IAIhB3H,EAASyD,KAAKP,KAAMyE,IAcjC,SAASC,EAAQ7H,EAAkBX,GACjC,IAAMyI,EAASzL,EAAegD,GAE9B,YAAkBX,IAAXoJ,EAAuBA,EAAO9H,GAAO3D,EAAe0L,GAAG/H,GAiBhE,SAASgI,EAAYF,EAAsBzI,WACnCM,EAAmBrD,OAAOC,OAAO,UAEvC,IAAoB,IAAA0L,EAAA9J,EAAA2J,iCAAQ,CAAvB,IAAM5H,UACTP,EAAQO,EAAMgI,eAAiB,CAC7BhI,MAAO2H,EAAQ3H,EAAMiI,cAA8B9I,sGAIvD,OAAOM,EAmBT,SAAS4D,EACP6E,EACAN,EACA5I,EACAe,GAWA,IAAK,IAAMD,KAAOd,EAAQS,QAExB,IAAoC,IAAhCmI,EAAO7I,QAAQe,GACjB,MAAM,IAAI3B,MAAM,eAAe2B,mCACnC8H,EAAOO,KAAK,UAIJ,IAAAhJ,WAAQgB,oBAEhB,OAAO9B,EAAE+J,QACP,EACAhM,OAAOC,OAAO,MAAO,CACnB4D,UAAW,cAAciI,EACzBzI,QAASqI,GAAgC,IAApB3H,EAA2ByH,EAAOS,QAAQC,UAC1CV,OACWpJ,IAAXW,EAAuBA,EAASxB,IAEvDqB,EACA,CAAEe,aAuEN,SAASwI,EAAiBzK,GACxB,MAAM,IAAIK,MAAM,8GACqDL,4BAKvE,SAASiF,EAAgBJ,EACA6F,EACAzI,GAKvB4C,EAAE6E,kBACF7E,EAAE4E,iBAMwB,mBAAbxH,IAC0B,IAAjCA,EAASyD,KAAKgF,EAAY7F,IAC9B6F,EAAWjK,MAAM,QAMrB,SAAS8G,EAAsBd,EACAzG,EACAkB,GAE7B,IAAMmF,EAAQnF,EAAQlB,GACtB,QAAcU,IAAV2F,EAAJ,CAIA,IAAMsE,EAAezJ,EAAiB,QAATlB,EAAiB,MAAQ,OACtDyG,EAAMO,KAAKhH,EAAMqG,GAET,IAAAuE,QAAMC,QAGd,OAAQ3J,EAAQsF,WACd,IAAK,OAEE,0BAA0BsE,KAAKzE,IAElCrC,QAAQC,KAAK,kOAGSjE,iDAGxB,MACF,IAAK,OACH,IAAK,4CAA4C8K,KAAKzE,GACpD,MAAM,IAAIhG,MAAM,IAAIL,uIAMtB,UAAuBU,IAAjBiK,GAA8BE,EAAOD,GACzC,OAAOH,EAAiBzK,GAE1B,MACF,QAEE,GAAIsH,MAAMjB,GACR,MAAM,IAAIhG,MAAM,IAAIL,wGAC2CA,4BAIjE,IAAM+K,EAAYhK,OAAO6J,GACnBI,EAAYjK,OAAO8J,GAGzB,UAAuBnK,IAAjBiK,GAA8BK,EAAYD,GAE3CzD,MAAMqD,IACT,OAAOF,EAAiBzK,KAMhCD,EAAU,KAAM,CACdkL,GAAI,KACJC,OAAQ,SACRC,QAAS,iBAhtEK,uCA+1CMC,EACAnJ,GACpB,OAAOqD,EAAmC,iBAArB8F,EACP,CAAEhK,QAASgK,GACXA,EAAkBnJ,sBAeLmJ,oEAE3B,SAAO,IAAIC,QAAQ,SAAAC,GACjBhG,EAAmC,iBAArB8F,EACP,CAAEhK,QAASgK,GAAqBA,OAChC1K,GACJ6D,IAAI,kBAAmB,WACtB+G,iCA+DgBF,EACAnJ,GACtB,OAAO4D,EAAqC,iBAArBuF,EACP,CAAEhK,QAASgK,GACXA,EAAkBnJ,wBAeLmJ,oEAE7B,SAAO,IAAIC,QAAQ,SAAAC,GACjB,IAAMpK,EAAsC,iBAArBkK,EACrB,CAAEhK,QAASgK,GAAqBA,EAC1BnJ,aAEJsJ,EAAyB,KAC7B1F,EAAS3E,EAAS,SAAuBmF,GAGvC,GAFAkF,EAASlF,OAEQ3F,IAAbuB,EACF,OAAOA,EAASyD,KAAKP,KAAMoG,KAE5BhH,IAAI,kBAAmB,WACxB+G,EAAQC,6CA3cZhL,EAAE,eAAeE,MAAM,4BAnEDT,GAEtB,YAAgBU,IAATV,EAAqB3B,EAAe2B,GAAQ3B,qBAy6B9B+M,EACAnJ,GACrB,OAAOqE,EAAoC,iBAArB8E,EACP,CAAEtI,MAAOsI,GACTA,EAAkBnJ,uBAgCjCmJ,oEAEA,SAAO,IAAIC,QAAQ,SAAAC,GACjB,IAAMpK,EAAsC,iBAArBkK,EAErB,CAAEtI,MAAOsI,GAA0BA,EAC7BnJ,aAEJsJ,EAA0B,KAC9BjF,EAAQpF,EAAS,SACSmF,GAGxB,GAFAkF,EAASlF,OAEQ3F,IAAbuB,EAIF,OAAQA,EAAiByD,KAAKP,KAAMoG,KAErChH,IAAI,kBAAmB,WACxB+G,EAAQC,qCAn8BevL,GAC3B,GAAa,OAATA,EAIF,MAAM,IAAIK,MAAM,iFAHThC,EAAe2B,0BAyBCqG,GACzBvG,EAAUuG,wBAdcrG,GACxBH,EAAgBG"}